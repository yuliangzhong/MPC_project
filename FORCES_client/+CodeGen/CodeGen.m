classdef CodeGen
    % CodeGen   A client to connect to the CodeGen service
    %    SERVICE = CodeGen  connects to https://forces.embotech.com/CodeGen.asmx and returns a SERVICE.
    %    
    %    To communicate with the service, call a function on the SERVICE:
    %
    %       [...] = FUNCTION(SERVICE,arg,...) 
    %
    %    See <a href="matlab:doc CodeGen">doc CodeGen</a> for a list of functions.
         
    % This file generated by matlab.wsdl.createWSDLClient at 17-May-2021 13:44:51
    % from https://forces.embotech.com/CodeGen.asmx?Wsdl.  
    % Please do not alter this file.

    properties (SetAccess = immutable)
        Endpoint;  % service endpoint 
        WSDLFile;  % URI of WSDL
    end
    properties (Hidden)
        PortObj;   % the Java object implementing this client's methods
    end

    methods
        function obj = CodeGen(url)
            obj.WSDLFile = 'https://forces.embotech.com/CodeGen.asmx?Wsdl'; 
            try
                wsdlService = codegen.CodeGen(java.net.URL(url));
                obj.PortObj = wsdlService.getCodeGenSoap; 
                obj.Endpoint = char(wsdlService.getServiceName().toString);
            catch e
                if strcmp(e.identifier,'MATLAB:undefinedVarOrClass')
                    % if we couldn't find the service, see if expected jar is on classpath
                    dir = fileparts(mfilename('fullpath'));
                    % We expect this service's jar file to be in +wsdl subdirectory in 
                    % the same directory as this class file.
                    jpath = java.io.File(fullfile(dir, '+wsdl', 'codegen.jar')).getCanonicalFile;
                    cp = javaclasspath('-all');
                    if ~any(cellfun(@(x)jpath.equals(java.io.File(x).getCanonicalFile), cp))
                        thePath = char(jpath.toString);
                        error(message('MATLAB:webservices:AddClasspath', 'CodeGen', thePath, thePath));
                    else
                        error(message('MATLAB:webservices:CannotFindClass', 'codegen.CodeGen'));
                    end
                else
                    rethrow(e);
                end
            end
        end

        function generateCodeFromMatlabResult = generateCodeFromMatlab(obj,userID,matFileByteStreamAsString,database)
        %generateCodeFromMatlab  
        %  generateCodeFromMatlabResult = generateCodeFromMatlab(obj,userID,matFileByteStreamAsString,database)  
        %    Inputs:
        %      obj - CodeGen object
        %      userID - string
        %      matFileByteStreamAsString - string
        %      database - string
        %    Output:
        %      generateCodeFromMatlabResult - string
        %
        % See also CodeGen.

            import matlab.wsdl.internal.*
            if nargin < 2, userID = []; end
            if nargin < 3, matFileByteStreamAsString = []; end
            if nargin < 4, database = []; end
            ret = matlab.internal.callJava('generateCodeFromMatlab',obj.PortObj,fromMATLAB({'generateCodeFromMatlab','userID'}, userID,'string',true,false),...
                fromMATLAB({'generateCodeFromMatlab','matFileByteStreamAsString'}, matFileByteStreamAsString,'string',true,false),...
                fromMATLAB({'generateCodeFromMatlab','database'}, database,'string',true,false));
            generateCodeFromMatlabResult = toMATLAB(ret,'string',false);

        end

        function getServerVersionResult = getServerVersion(obj)
        %getServerVersion  
        %  getServerVersionResult = getServerVersion(obj)  
        %    Inputs:
        %      obj - CodeGen object
        %    Output:
        %      getServerVersionResult - string
        %
        % See also CodeGen.

            import matlab.wsdl.internal.*
            ret = matlab.internal.callJava('getServerVersion',obj.PortObj);
            getServerVersionResult = toMATLAB(ret,'string',false);

        end

        function getLicenseFileResult = getLicenseFile(obj,userID,license_file_name,database)
        %getLicenseFile  
        %  getLicenseFileResult = getLicenseFile(obj,userID,license_file_name,database)  
        %    Inputs:
        %      obj - CodeGen object
        %      userID - string
        %      license_file_name - string
        %      database - string
        %    Output:
        %      getLicenseFileResult - string
        %
        % See also CodeGen.

            import matlab.wsdl.internal.*
            if nargin < 2, userID = []; end
            if nargin < 3, license_file_name = []; end
            if nargin < 4, database = []; end
            ret = matlab.internal.callJava('getLicenseFile',obj.PortObj,fromMATLAB({'getLicenseFile','userID'}, userID,'string',true,false),...
                fromMATLAB({'getLicenseFile','license_file_name'}, license_file_name,'string',true,false),...
                fromMATLAB({'getLicenseFile','database'}, database,'string',true,false));
            getLicenseFileResult = toMATLAB(ret,'string',false);

        end

        function generateCLAFTestsFromMatlabResult = generateCLAFTestsFromMatlab(obj,userID,matFileByteStreamAsString,createDataScript,database)
        %generateCLAFTestsFromMatlab  
        %  generateCLAFTestsFromMatlabResult = generateCLAFTestsFromMatlab(obj,userID,matFileByteStreamAsString,createDataScript,database)  
        %    Inputs:
        %      obj - CodeGen object
        %      userID - string
        %      matFileByteStreamAsString - string
        %      createDataScript - string
        %      database - string
        %    Output:
        %      generateCLAFTestsFromMatlabResult - string
        %
        % See also CodeGen.

            import matlab.wsdl.internal.*
            if nargin < 2, userID = []; end
            if nargin < 3, matFileByteStreamAsString = []; end
            if nargin < 4, createDataScript = []; end
            if nargin < 5, database = []; end
            ret = matlab.internal.callJava('generateCLAFTestsFromMatlab',obj.PortObj,fromMATLAB({'generateCLAFTestsFromMatlab','userID'}, userID,'string',true,false),...
                fromMATLAB({'generateCLAFTestsFromMatlab','matFileByteStreamAsString'}, matFileByteStreamAsString,'string',true,false),...
                fromMATLAB({'generateCLAFTestsFromMatlab','createDataScript'}, createDataScript,'string',true,false),...
                fromMATLAB({'generateCLAFTestsFromMatlab','database'}, database,'string',true,false));
            generateCLAFTestsFromMatlabResult = toMATLAB(ret,'string',false);

        end

        function display(obj)
            disp(obj)
        end
    end

    % These are static convenience methods for creating objects
    % that need to be passed in as parameters to service methods 
    % or other convenience methods, to avoid having to invoke the
    % constructors in the package wsdl.codegen.  
    methods (Static)

    end
end

